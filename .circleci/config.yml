# ************************************************************************************
#   Copyright (c) 2021 SingleStore, Inc.
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Library General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with this library; if not see <http://www.gnu.org/licenses>
#   or write to the Free Software Foundation, Inc.,
#   51 Franklin St., Fifth Floor, Boston, MA 02110, USA
# *************************************************************************************/

version: 2.1
commands:
  setup-environment-linux:
    description: "Setup the linux environment"
    steps:
      - run:
          name: Setup Machine
          command: |
            sudo apt update
            sudo apt install -y curl
            sudo apt-get update
            sudo apt-get install -y mysql-client-core-5.5
            sudo apt-get install unixodbc odbcinst
            sudo apt-get install unixodbc-dev
            sudo apt-get install --allow-unauthenticated -y --force-yes -m unixodbc-dev odbcinst1debian2 libodbc1
            sudo apt-get clean
  setup-environment-macos:
    description: "Setup the macos environment"
    steps:
      - run:
          name: Setup Machine
          command: |
            brew update
            sudo chown -R $(whoami) /usr/local/Cellar/nghttp2/1.43.0
            sudo chown -R $(whoami) /usr/local/Cellar/rtmpdump/2.4+20151223_1
            brew install openssl@1.1
            brew install curl
            brew install libiodbc
            brew install mysql-client
            brew install cmake
            brew cleanup

orbs:
  win: circleci/windows@2.4.0

jobs:
  build-windows:
    parameters:
      build_type:
        type: string
      test_dsn:
        type: string
      test_driver:
        type: string
    executor: win/default
    environment:
      BUILD_TYPE: << parameters.build_type >>
      TEST_DRIVER: << parameters.test_driver >>
      TEST_DSN: << parameters.test_dsn >>
    steps:
      - checkout
      - run:
          name: Download CMake
          command: |
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI https://github.com/Kitware/CMake/releases/download/v3.19.0/cmake-3.19.0-win64-x64.zip -OutFile $Env:HOMEPATH\cmake-3.19.0-win64-x64.zip
            Expand-Archive $Env:HOMEPATH\cmake-3.19.0-win64-x64.zip -DestinationPath "$Env:ProgramFiles"
            Rename-Item "$Env:ProgramFiles\cmake-3.19.0-win64-x64" -NewName CMake
            Install-WindowsFeature Net-Framework-Core
      - run:
          name: Build project
          command: |
            .circleci\build-windows.ps1
      - run:
          name: Run tests
          command: |
            .circleci\run-tests-windows.ps1

  build-macos:
    parameters:
      build_type:
        type: string
      test_dsn:
        type: string
      driver_name:
        type: string
    macos:
      xcode: 11.0.0
    environment:
      BUILD_TYPE: << parameters.build_type >>
      TEST_DSN: << parameters.test_dsn >>
      DRIVER_NAME: << parameters.driver_name >>
      TEST_SCHEMA: odbc_test
      CONTINUOUS_INTEGRATION: true
    steps:
      - run:
          name: Define Environment Variables
          command: |
            echo 'export TEST_DRIVER=$DRIVER_NAME' >> $BASH_ENV
            echo 'export TEST_SERVER=$MEMSQL_HOST' >> $BASH_ENV
            echo 'export TEST_UID=$MEMSQL_USER' >> $BASH_ENV
            echo 'export TEST_PORT=$MEMSQL_PORT' >> $BASH_ENV
            echo 'export TEST_PASSWORD=$MEMSQL_PASSWORD' >> $BASH_ENV
            source $BASH_ENV
      - setup-environment-macos
      - checkout
      - run:
          name: Build project
          command: |
            ./.circleci/build-osx.sh
      - run:
          name: Run tests
          command: |
            ./.circleci/run-tests-osx.sh

  build-ubuntu:
    parameters:
      memsql_password:
        type: string
      machine_class:
        type: string
      test_dsn:
        type: string
      test_driver:
        type: string
      memsql_image:
        type: string
      build_type:
        type: string
    machine: true
    resource_class: << parameters.machine_class >>
    environment:
      BUILD_TYPE: << parameters.build_type >>
      MEMSQL_IMAGE: << parameters.memsql_image >>
      MEMSQL_PASSWORD: << parameters.memsql_password >>
      TEST_DRIVER: << parameters.test_driver >>
      TEST_DSN: << parameters.test_dsn >>
      TEST_SERVER: singlestore.test.com
      TEST_SCHEMA: odbc_test
      TEST_UID: root
      TEST_PORT: 5506
      CONTINUOUS_INTEGRATION: true
    steps:
      - setup-environment-linux
      - checkout
      - run:
          name: Setup test cluster
          command: |
            if [ "$MEMSQL_PASSWORD" = "" ]
            then
              ./scripts/ensure-test-memsql-cluster.sh
            else
              ./scripts/ensure-test-memsql-cluster-password.sh
            fi
      - run:
          name: Create test database
          command: ./.circleci/create-database.sh
      - run:
          name: Build project
          command: ./.circleci/build-ubuntu.sh
      - run:
          name: Run tests
          command: ./.circleci/run-tests-linux.sh

  build-linux-in-docker:
    #    We need docker based jobs because CircleCI has only ubuntu Linux executor and we need to test our connector on Debian and CentOS too
    parameters:
      os_version:
        type: string
      build_type:
        type: string
      test_dsn:
        type: string
      test_driver:
        type: string
    docker:
      - image: << parameters.os_version >>
    environment:
      IMAGE_NAME: << parameters.os_version >>
      BUILD_TYPE: << parameters.build_type >>
      TEST_DRIVER: << parameters.test_driver >>
      TEST_DSN: << parameters.test_dsn >>
      TEST_SCHEMA: odbc_test
      CONTINUOUS_INTEGRATION: true
    steps:
      - run:
          name: Define Environment Variables
          command: |
            echo 'export TEST_SERVER=$MEMSQL_HOST' >> $BASH_ENV
            echo 'export TEST_UID=$MEMSQL_USER' >> $BASH_ENV
            echo 'export TEST_PORT=$MEMSQL_PORT' >> $BASH_ENV
            echo 'export TEST_PASSWORD=$MEMSQL_PASSWORD' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run:
          name: Setup Environment
          command: ./.circleci/setup-environment-docker.sh
      - run:
          name: Build project
          command: ./.circleci/build-linux-in-docker.sh
      - run:
          name: Run tests
          command: ./.circleci/run-tests-linux.sh

  publish-windows:
    parameters:
      build_type:
        type: string
    executor: win/default
    environment:
      BUILD_TYPE: << parameters.build_type >>
    steps:
      - checkout
      - run:
          name: Download CMake
          command: |
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI https://github.com/Kitware/CMake/releases/download/v3.19.0/cmake-3.19.0-win64-x64.zip -OutFile $Env:HOMEPATH\cmake-3.19.0-win64-x64.zip
            Expand-Archive $Env:HOMEPATH\cmake-3.19.0-win64-x64.zip -DestinationPath "$Env:ProgramFiles"
            Rename-Item "$Env:ProgramFiles\cmake-3.19.0-win64-x64" -NewName CMake
            Install-WindowsFeature Net-Framework-Core
      - run:
          name: Build project
          command: |
            .circleci\build-windows.ps1
      - store_artifacts:
          path: C:\Users\circleci\project\wininstall\singlestore-connector-odbc-0.8.2-beta-win64.msi

  publish-macos:
    parameters:
      build_type:
        type: string
    macos:
      xcode: 11.0.0
    environment:
      BUILD_TYPE: << parameters.build_type >>
      CONTINUOUS_INTEGRATION: true
    steps:
      - setup-environment-macos
      - checkout
      - run:
          name: Build project
          command: |
            ./.circleci/build-osx.sh
      - store_artifacts:
          path: /Users/distiller/project/osxinstall/singlestore-connector-odbc-0.8.2-beta-osx-x86_64.pkg

  publish-linux:
    parameters:
      os_version:
        type: string
      os_name:
        type: string
      build_type:
        type: string
    docker:
      - image: << parameters.os_version >>
    environment:
      IMAGE_NAME: << parameters.os_version >>
      BUILD_TYPE: << parameters.build_type >>
      CONTINUOUS_INTEGRATION: true
    steps:
      - checkout
      - run:
          name: Setup Environment
          command: ./.circleci/setup-environment-docker.sh
      - run:
          name: Build project
          command: ./.circleci/build-linux-in-docker.sh
      - run:
          name: Create archive
          command: |
            tar -zcvf singlestore-connector-odbc-0.8.2-beta-<< parameters.os_name >>-amd64.tar.gz /root/project/linuxinstall/README.md /root/project/libssodbca.so /root/project/libssodbcw.so
      - store_artifacts:
          path: /root/project/singlestore-connector-odbc-0.8.2-beta-<< parameters.os_name >>-amd64.tar.gz

workflows:
  test:
    jobs:
      - build-ubuntu:
          name: build-ubuntu-unicode-7.3.2-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              memsql_password:
                - password
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.3.2-a364d4b31f-3.0.0-1.9.3
      - build-ubuntu:
          name: build-ubuntu-ansi-7.3.2-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              memsql_password:
                - password
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.3.2-a364d4b31f-3.0.0-1.9.3
      - build-macos:
          name: build-macos-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              driver_name:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-macos:
          requires:
            - build-macos-unicode-RelWithDebInfo
          name: build-macos-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              driver_name:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
      - build-windows:
          requires:
            - build-macos-ansi-RelWithDebInfo
          name: build-windows-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-windows:
          requires:
            - build-windows-unicode-RelWithDebInfo
          name: build-windows-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
  daily:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-ubuntu:
          name: build-ubuntu-unicode-7.3.2-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              memsql_password:
                - password
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.3.2-a364d4b31f-3.0.0-1.9.3
      - build-ubuntu:
          name: build-ubuntu-unicode-7.1.13-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              memsql_password:
                - password
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.1.13-11ddea2a3a-3.0.0-1.9.3
      - build-ubuntu:
          name: build-ubuntu-unicode-7.0.15-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - medium
              memsql_password:
                - ""
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.0.15-619d118712-1.9.5-1.5.0
      - build-ubuntu:
          name: build-ubuntu-ansi-7.3.2-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              memsql_password:
                - password
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.3.2-a364d4b31f-3.0.0-1.9.3
      - build-ubuntu:
          name: build-ubuntu-ansi-7.1.13-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - large
              memsql_password:
                - password
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.1.13-11ddea2a3a-3.0.0-1.9.3
      - build-ubuntu:
          name: build-ubuntu-ansi-7.0.15-<< matrix.build_type >>
          matrix:
            parameters:
              machine_class:
                - medium
              memsql_password:
                - ""
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
              memsql_image:
                - memsql/cluster-in-a-box:centos-7.0.15-619d118712-1.9.5-1.5.0
      - build-linux-in-docker:
          name: build-debian-8-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:8
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-linux-in-docker:
          requires:
            - build-debian-8-unicode-RelWithDebInfo
          name: build-debian-8-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:8
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
      - build-linux-in-docker:
          requires:
            - build-debian-8-ansi-RelWithDebInfo
          name: build-debian-9-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:9
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-linux-in-docker:
          requires:
            - build-debian-9-unicode-RelWithDebInfo
          name: build-debian-9-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:9
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
      - build-linux-in-docker:
          requires:
            - build-debian-9-ansi-RelWithDebInfo
          name: build-debian-10-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:10
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-linux-in-docker:
          requires:
            - build-debian-10-unicode-RelWithDebInfo
          name: build-debian-10-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - debian:10
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
      - build-linux-in-docker:
          requires:
            - build-debian-10-ansi-RelWithDebInfo
          name: build-centos-7-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - centos:centos7
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-linux-in-docker:
          requires:
            - build-centos-7-unicode-RelWithDebInfo
          name: build-centos-7-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - centos:centos7
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
      - build-linux-in-docker:
          requires:
            - build-centos-7-ansi-RelWithDebInfo
          name: build-centos-8-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - centos:centos8
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-linux-in-docker:
          requires:
            - build-centos-8-unicode-RelWithDebInfo
          name: build-centos-8-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              os_version:
                - centos:centos8
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
      - build-macos:
          requires:
            - build-centos-8-ansi-RelWithDebInfo
          name: build-macos-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              driver_name:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-macos:
          requires:
            - build-macos-unicode-RelWithDebInfo
          name: build-macos-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              driver_name:
                - SingleStore ODBC 0.8.2-beta ANSI Driver
      - build-windows:
          requires:
            - build-macos-ansi-RelWithDebInfo
          name: build-windows-unicode-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_w
              test_driver:
                - SingleStore ODBC 0.8.2-beta Unicode Driver
      - build-windows:
          requires:
            - build-windows-unicode-RelWithDebInfo
          name: build-windows-ansi-<< matrix.build_type >>
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
              test_dsn:
                - ssodbc_test_a
              test_driver:
                - SingleStore ODBC 0.8.2-beta ANSI Driver

  publish:
    jobs:
      - publish-windows:
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-macos:
          matrix:
            parameters:
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-linux:
          matrix:
            parameters:
              os_version:
                - centos:centos7
              os_name:
                - centos7
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-linux:
          matrix:
            parameters:
              os_version:
                - centos:centos8
              os_name:
                - centos8
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-linux:
          matrix:
            parameters:
              os_version:
                - debian:9
              os_name:
                - debian9
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-linux:
          matrix:
            parameters:
              os_version:
                - debian:10
              os_name:
                - debian10
              build_type:
                - RelWithDebInfo
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
